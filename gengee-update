#!/usr/bin/python
# -*- coding: utf-8 -*-

from gengee import common, database, pull, __version__ as version
from gengee.portage import *
from github import Github
import requests

keywords = ["bump", "revbump", "verbump", "drop", "eapi", "use", "license", "security", "static", "cross", "fix"]
config = common.getConfig()
repo_path = getRepoPath()
current_db = database.Database(config["dbpath"])
updated_db = database.Database(config["dbpath"])

# check if we can use existing db for cache
try:
    current_db.read()
except (FileNotFoundError, SyntaxError, ValueError):
    print("no valid existing db found")
    pass

# connect to Github or die trying
try:
    g = Github(config["github_token"], user_agent="Gengee/PyGithub")
    r = g.get_repo("gentoo/gentoo")
except Exception as e:
    print(str(e))
    exit()


# harvest and update db with PR's
for pullrequest in r.get_pulls('open'):
    print(str(pullrequest.number) + " :: " + pullrequest.title)

    PR = pull.Pull()
    PR.loadGH(pullrequest)
    PR.setKeywords(keywords)

    # check if we can use PR data from previous run
    if current_db.checkCacheStatus(PR,PR.p["updated_ts"]) and common.checkCompatibleDatabase(version,current_db.db["version"]):
        PR.p["eclasses"] = current_db.getPullAttribute(PR.nr,"eclasses")
        PR.p["packages"] = current_db.getPullAttribute(PR.nr,"packages")
        PR.p["ebuilds"] = current_db.getPullAttribute(PR.nr,"ebuilds")
        PR.p["manifest"] = current_db.getPullAttribute(PR.nr,"manifest")
        PR.p["commits"] = current_db.getPullAttribute(PR.nr,"commits")
        PR.p["bugs"] = current_db.getPullAttribute(PR.nr,"bugs")
    else:
        # conditional retrieval of extra's
        if PR.p["file_count"] < config["file_scan_max"]:
            PR.setFileData(pullrequest.get_files())

        if PR.p["commit_count"] < 20:
            PR.setCommitData(pullrequest.get_commits())

    # retrieve maintainers from portage repo
    for package in PR.p["packages"]:
        PR.p["maintainers"] = getMaintainers(package,repo_path)

    # retrieving bugzilla status
    for bug in PR.p["bugs"]:
        r = requests.get("https://bugs.gentoo.org/rest/bug/" + bug + "?include_fields=status")
        bugdata = r.json()
        PR.p["bugs"][bug] = bugdata["bugs"][0]["status"]

    updated_db.addPull(PR.nr,PR.p)

# and write
updated_db.write(version)
