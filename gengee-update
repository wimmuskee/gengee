#!/usr/bin/python
# -*- coding: utf-8 -*-

from gengee import common, database
from gengee.portage import *
from github import Github

keywords = ["bump", "revbump", "verbump", "drop", "eapi", "use", "license", "security", "static", "cross", "fix"]
config = common.getConfig()
repo_path = getRepoPath()
current_db = database.Database(config["dbpath"])
updated_db = database.Database(config["dbpath"])

# check if we can use existing db for cache
try:
    current_db.read()
except (FileNotFoundError, SyntaxError, ValueError):
    print("no valid existing db found")
    pass

# connect to Github or die trying
try:
    g = Github(config["github_token"])
    r = g.get_repo("gentoo/gentoo")
except Exception as e:
    print(str(e))
    exit()


# harvest and update db with PR's
for pull in r.get_pulls('open'):
    PR = str(pull.number)
    print(PR + " :: " + pull.title)

    p = {
        "comment_count": pull.comments,
        "commit_count": pull.commits,
        "ebuilds": set(),
        "eclasses": set(),
        "files": [],
        "file_count": pull.changed_files,
        "keywords": [],
        "labels": [],
        "maintainers": [],
        "manifest": False,
        "mergeable": pull.mergeable,
        "number": PR,
        "packages": set(),
        "title": pull.title,
        "updated": pull.updated_at.strftime("%Y-%m-%d"),
        "updated_ts": int(pull.updated_at.timestamp()),
        "user": pull.user.login
    }
    for l in pull.labels:
        p["labels"].append(l.name)

    # keywords, match from selected list
    for match_kw in keywords:
        if match_kw in p["title"].lower():
            p["keywords"].append(match_kw)

    # check if we can use PR data from previous run
    if current_db.checkCacheStatus(PR,p["updated_ts"]):
        p["eclasses"] = current_db.getPullAttribute(PR,"eclasses")
        p["packages"] = current_db.getPullAttribute(PR,"packages")
        p["ebuilds"] = current_db.getPullAttribute(PR,"ebuilds")
        p["manifest"] = current_db.getPullAttribute(PR,"manifest")
    else:
        # only get files when
        if p["file_count"] < config["file_scan_max"]:
            print("getting files")
            for c in pull.get_files():
                split_fn = c.filename.split("/")
                if split_fn[0] == "eclass":
                    p["eclasses"].add(split_fn[1])
                elif "-" not in split_fn[0]:
                    # don't do anything with license/profile
                    pass
                else:
                    p["packages"].add(split_fn[0] + "/" + split_fn[1])
                p["files"].append(c.filename)
                if c.filename[-7:] == ".ebuild":
                    p["ebuilds"].add(split_fn[2][:-7])
                if c.filename[-9:] == "/Manifest":
                    p["manifest"] = True

    # retrieve maintainers from portage repo
    for package in p["packages"]:
        p["maintainers"] = getMaintainers(package,repo_path)

    # set to list because not json serializable
    p["ebuilds"] = list(p["ebuilds"])
    p["eclasses"] = list(p["eclasses"])
    p["packages"] = list(p["packages"])

    updated_db.addPull(PR,p)

# and write
updated_db.write()
